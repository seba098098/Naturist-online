import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { PrismaClient, AuthProvider, Role } from '@prisma/client';
import { createError } from '../middleware/errorHandler';

const prisma = new PrismaClient();

type User = {
  id: number;
  name: string;
  email: string;
  password_hash: string;
  role: Role;
  auth_provider: AuthProvider;
  created_at: Date;
  updated_at: Date;
  avatar_url?: string | null;
  email_verified?: boolean;
};

// Variables de entorno
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';
const SALT_ROUNDS = 10;

// Tipos
export interface AuthResponse {
  token: string;
  user: Omit<User, 'password_hash'>;
}

/**
 * Registra un nuevo usuario local
 * - Verifica si el email ya existe
 * - Hashea la contraseña
 * - Crea el usuario en la base de datos
 * - Genera y devuelve un token JWT
 */
export const registerUser = async (
  name: string, 
  email: string, 
  password: string
): Promise<AuthResponse> => {
  // Verificar si el usuario existe
  const existingUser = await prisma.users.findUnique({ where: { email } });
  if (existingUser) {
    throw createError('El correo electrónico ya está registrado', 400, 'AUTH_ERROR');
  }

  // Hashear la contraseña
  const password_hash = await bcrypt.hash(password, SALT_ROUNDS);
  
  // Crear el usuario
  const user = await prisma.users.create({
    data: { 
      name, 
      email, 
      password_hash, 
      auth_provider: AuthProvider.LOCAL,
      role: 'USER' // Rol por defecto
    },
  });

  // Generar token JWT - Asegurarse de que el ID sea un string
  const token = generateToken(user.id.toString(), user.role);
  
  // Devolver token y datos del usuario (sin la contraseña)
  const { password_hash: __, ...userWithoutPassword } = user;
  return { token, user: userWithoutPassword };
};

/**
 * Autentica a un usuario local
 * - Busca al usuario por email
 * - Verifica la contraseña
 * - Genera y devuelve un token JWT
 */
export const loginUser = async (
  email: string, 
  password: string
): Promise<AuthResponse> => {
  // Buscar usuario
  const user = await prisma.users.findUnique({ where: { email } });
  
  // Verificar si el usuario existe
  if (!user) {
    throw createError('No existe una cuenta con este correo electrónico', 401, 'AUTH_ERROR');
  }
  
  // Verificar si el usuario usa autenticación local
  if (user.auth_provider !== AuthProvider.LOCAL) {
    throw createError('Por favor, inicia sesión con el método de autenticación correcto', 401, 'AUTH_ERROR');
  }

  // Verificar la contraseña
  const passwordToCompare = user.password_hash || '';
  const isPasswordValid = await bcrypt.compare(password, passwordToCompare);
  if (!isPasswordValid) {
    throw createError('Contraseña incorrecta', 401, 'AUTH_ERROR');
  }

  // Generar token JWT - Asegurarse de que el ID sea un string
  const token = generateToken(user.id.toString(), user.role);
  
  // Devolver token y datos del usuario (sin la contraseña)
  const { password_hash, ...userWithoutPassword } = user;
  return { token, user: userWithoutPassword };
};

/**
 * Obtiene el perfil de un usuario por su ID
 */
export const getUserProfile = async (userId: number) => {
  // Buscar usuario por ID
  const user = await prisma.users.findUnique({
    where: { id: userId },
    select: {
      id: true,
      name: true,
      email: true,
      role: true,
      avatar_url: true,
      auth_provider: true,
      created_at: true,
      updated_at: true
    }
  });
  return user;
};

/**
 * Restablece la contraseña de un usuario local
 * - Verifica que el usuario exista y sea local
 * - Actualiza la contraseña con el nuevo hash
 */
export const resetUserPassword = async (email: string, newPassword: string): Promise<void> => {
  // Buscar usuario
  const user = await prisma.users.findUnique({ where: { email } });
  
  // Verificar si el usuario existe y usa autenticación local
  if (!user || user.auth_provider !== AuthProvider.LOCAL) {
    throw createError('Usuario no encontrado o no usa autenticación local', 404, 'AUTH_ERROR');
  }

  // Hashear la nueva contraseña
  const newHash = await bcrypt.hash(newPassword, SALT_ROUNDS);
  
  // Actualizar la contraseña
  await prisma.users.update({ 
    where: { email }, 
    data: { password_hash: newHash } 
  });
};

/**
 * Encuentra o crea un usuario usando Google OAuth
 * - Busca por email
 * - Crea el usuario si no existe
 * - Genera y devuelve un token JWT
 */
export const findOrCreateGoogleUser = async (
  email: string, 
  name: string, 
  avatar?: string | null
): Promise<AuthResponse> => {
  // Buscar usuario existente
  let user = await prisma.users.findUnique({ 
    where: { email }
  });
  
  // Si no existe, crearlo
  if (!user) {
    user = await prisma.users.create({
      data: { 
        name, 
        email, 
        password_hash: '', // Sin contraseña para autenticación por OAuth
        auth_provider: AuthProvider.GOOGLE,
        avatar_url: avatar || null,
        role: 'USER', // Rol por defecto
        email_verified: true
      },
    });
  }
  
  // Si el usuario existe pero con otro proveedor
  if (user.auth_provider !== AuthProvider.GOOGLE) {
    throw createError(
      'Este correo ya está registrado con otro método de autenticación', 
      400, 
      'AUTH_ERROR'
    );
  }

  // Actualizar la última vez que inició sesión
  await prisma.users.update({
    where: { id: user.id },
    data: { updated_at: new Date() }
  });

  // Generar token JWT - Asegurarse de que el ID sea un string
  const token = generateToken(user.id.toString(), user.role);
  
  // Devolver token y datos del usuario (sin la contraseña)
  const { password_hash, ...userWithoutPassword } = user;
  return { token, user: userWithoutPassword };
};

/**
 * Genera un token JWT para el usuario
 */
const generateToken = (userId: string, role: string): string => {
  // Asegurarse de que userId sea un string
  const userIdStr = String(userId);
  const payload = { 
    userId: userIdStr, 
    role,
    iat: Math.floor(Date.now() / 1000) // Fecha de emisión
  };
  
  // Configurar opciones del token con un valor numérico para evitar problemas de tipado
  const options = { 
    expiresIn: 60 * 60 * 24 * 7, // 7 días en segundos
    algorithm: 'HS256' as const
  };
  
  // Usar una aserción de tipo para el payload
  return jwt.sign(payload as object, JWT_SECRET, options);
};
