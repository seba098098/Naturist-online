datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum DeliveryType {
  CASA
  OFICINA
}
// En la parte superior de tu archivo schema.prisma
enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK // opcional para futuro
  APPLE    // opcional para futuro
}

// Modifica el modelo users
model users {
  id            Int         @id @default(autoincrement())
  name          String
  email         String      @unique
  password_hash String
  role          Role        @default(USER)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  auth_provider AuthProvider @default(LOCAL)  // <--- nuevo campo agregado

  addresses     addresses[]
  orders        orders[]
  cart_items    cart_items[]
  reviews       reviews[]
  questions     questions[]
  sales         sales[]
}

model categories {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String     @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  products products[]
}

model products {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String?
  price       Float
  stock       Int           @default(0)
  categoryId  Int
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  category    categories    @relation(fields: [categoryId], references: [id])
  images      product_images[]
  order_items order_items[]
  cart_items  cart_items[]
  reviews     reviews[]
  questions   questions[]
}

model product_images {
  id         Int      @id @default(autoincrement())
  productId  Int
  url        String   // ruta local tipo "/uploads/imagen.jpg"

  product    products @relation(fields: [productId], references: [id])
}

model cart_items {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  quantity   Int      @default(1)

  user       users    @relation(fields: [userId], references: [id])
  product    products @relation(fields: [productId], references: [id])
}

model orders {
  id          Int         @id @default(autoincrement())
  userId      Int
  status      OrderStatus @default(PENDING)
  total       Float
  addressId   Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  user        users       @relation(fields: [userId], references: [id])
  address     addresses   @relation(fields: [addressId], references: [id])
  order_items order_items[]

  sales       sales?      // una venta asociada (uno a uno)
}

model addresses {
  id            Int         @id @default(autoincrement())
  userId        Int
  country       String
  city          String
  street        String
  postal_code   String
  name          String      // nombre destinatario
  cedula        String
  phone         String
  municipio     String
  delivery_type DeliveryType

  user          users       @relation(fields: [userId], references: [id])

  // ðŸ”§ RelaciÃ³n inversa agregada
  orders        orders[]    // una direcciÃ³n puede estar asociada a muchos pedidos
}


model reviews {
  id         Int       @id @default(autoincrement())
  userId     Int
  productId  Int
  rating     Int       @db.SmallInt
  comment    String?
  created_at DateTime  @default(now())

  user       users     @relation(fields: [userId], references: [id])
  product    products  @relation(fields: [productId], references: [id])
}

model questions {
  id         Int       @id @default(autoincrement())
  userId     Int
  productId  Int
  question   String
  answer     String?
  created_at DateTime  @default(now())

  user       users     @relation(fields: [userId], references: [id])
  product    products  @relation(fields: [productId], references: [id])
}

model order_items {
  id         Int       @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Float

  order      orders    @relation(fields: [orderId], references: [id])
  product    products  @relation(fields: [productId], references: [id])
}

model sales {
  id           Int       @id @default(autoincrement())
  orderId      Int       @unique
  userId       Int
  sale_date    DateTime  @default(now())
  total_amount Float

  order        orders    @relation(fields: [orderId], references: [id])
  user         users     @relation(fields: [userId], references: [id])
}
